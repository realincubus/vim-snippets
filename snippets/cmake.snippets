snippet cmake
	CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
	PROJECT(${1:ProjectName})

	SET( CMAKE_BUILD_TYPE DEBUG )
	option( USE_ADDRESS_SANITIZER on)
	option( USE_LIBRARY_ACCESS_CHECK off)


	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS} -march=native" )

	SET( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -pedantic" )
	if ( ${USE_ADDRESS_SANITIZER} )
	  SET( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address" )
	endif()
	if ( ${USE_LIBRARY_ACCESS_CHECK} )
	  SET( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_DEBUG" )
	endif()

	SET( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}" )

	SET( CMAKE_CXX_STANDARD 14 )

	#SET( EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin )
	#SET( LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib )

	SET( CMAKE_EXPORT_COMPILE_COMMANDS on )

	ADD_EXECUTABLE(bin_$1 ${2:main.cpp})

	#TARGET_INCLUDE_DIRECTORIES( bin_$1 )
	#TARGET_LINK_LIBRARIES( bin_$1 )

snippet append "append something to a variable" 
	SET(${1} "${$1} ${2:}")

snippet find_openmp "find openmp" 
	FIND_PACKAGE( OpenMP REQUIRED )
	IF(OPENMP_FOUND)
	    message("OPENMP FOUND")
	    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
	    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
	ENDIF()

snippet find_mpi "find mpi"
	FIND_PACKAGE( MPI REQUIRED )
	IF( MPI_FOUND )
	  include_directories(${MPI_INCLUDE_PATH})
	  target_link_libraries(hello ${MPI_LIBRARIES})
	ENDIF()


snippet find_cuda "find cuda" 
	FIND_PACKAGE(CUDA REQUIRED)
	IF(CUDA_FOUND)
	  INCLUDE(FindCUDA)
	  SET( CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} " ) 
	  #CUDA_INCLUDE_DIRECTORIES()
	ENDIF()

snippet include
	TARGET_INCLUDE_DIRECTORIES(
		${1:target}
		${2:/path}
	)

snippet find
	FIND_PACKAGE(${0:LIBRARY})

snippet glob
	FILE(GLOB ${1:SRCS} *.${0:cpp})

snippet subdir
	ADD_SUBDIRECTORY(${0:src})

snippet lib
	ADD_LIBRARY(${1:lib} ${2:STATIC}
		${${0:SRCS}}
	)

snippet link
	TARGET_LINK_LIBRARIES(${1:bin}
		${0:somelib}
	)

snippet adde
	ADD_EXECUTABLE(${1:bin})

snippet set
	SET(${1:var} ${0:val})

snippet dep
	ADD_DEPENDENCIES(${1:target}
		${0:dep}
	)

snippet props
	SET_TARGET_PROPERTIES(${1:target}
		${2:PROPERTIES} ${3:COMPILE_FLAGS}
		${0:"-O3 -Wall -pedantic"}
	)
