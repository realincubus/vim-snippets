###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet def "#define ..."
#define ${1}
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet #if "#if #endif" !b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char** argv){
  ${VISUAL}${0}
  return 0;
}
endsnippet

snippet for "for loop (for)"
for (int ${2:i} = 0; $2 < ${1:count}; ${3:++$2}){
  ${VISUAL}${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}){
	${VISUAL}${0}
}
endsnippet

snippet enumo "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet once "Include header once only guard"
#pragma once
${VISUAL}${0}
endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet wh "while loop"
while(${1:/* condition */}) {
  ${VISUAL}${0}
}
endsnippet

snippet do "do...while loop (do)"
do {
  ${VISUAL}${0}
} while(${1:/* condition */});
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */}){
  ${VISUAL}${0}
}
endsnippet

snippet el "else .. (else)"
else {
  ${VISUAL}${0}
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */}){
  ${2:/* code */}
}else{
  ${3:/* else */}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
  ${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3})
{
	${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

snippet mpi_rank "mpi rank"
int $1; 
MPI_Comm_rank (MPI_COMM_WORLD, &${1:mpi_rank});
endsnippet

snippet mpi_size "mpi size"
int $1; 
MPI_Comm_size (MPI_COMM_WORLD, &${1:mpi_size});
endsnippet

snippet mpi_world "Description"
MPI_COMM_WORLD
endsnippet

snippet mpi_scatter "scatter"
MPI_Scatter( ${1:sendbuf}, ${2:sendcount}, ${3:sendtype}, ${4:recvcount}, ${5:recvtype}, ${6:root}, ${7:world} );
endsnippet

snippet mpi_broadcast "broadcast"
MPI_Bcast( ${1:buffer}, ${2:count}, ${3:type}, ${4:root}, ${5:world} );
endsnippet

snippet mpi_reduce "reduce"
MPI_Reduce( ${1:sendbuffer}, ${2:recvbuffer}, ${3:count}, ${4:type}, ${5:op}, ${6:root}, ${7:world} );
endsnippet

snippet mpi_send "send"
MPI_Send( ${1:sendbuf}, ${2:sendcount}, ${3:type}, ${4:dest}, ${5:tag}, ${6:world} );
endsnippet

snippet mpi_recv "receive"
MPI_Recv( ${1:recvbuf}, ${2:count}, ${3:type}, ${4:dest}, ${5:tag}, ${6:world} );
endsnippet

snippet ass "assert"
assert( ${1:0} && "${2}" );
endsnippet

snippet exf "exit failure"
exit(EXIT_FAILURE);
endsnippet

snippet exs "exit success" 
exit(EXIT_SUCCESS);
endsnippet

snippet mpi_init "init text"
MPI_Init( &argc, &argv );
endsnippet

snippet mpi_get_processor_name "pname"
char pname[MPI_MAX_PROCESSOR_NAME];
int resultlen = -1;
MPI_Get_processor_name( pname, &resultlen );
endsnippet

snippet mpi_final "finalize"
MPI_Finalize();
endsnippet

# vim:ft=snippets:
